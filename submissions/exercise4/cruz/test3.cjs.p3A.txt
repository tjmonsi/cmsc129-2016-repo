Start
Main
Fn-def
Main'
function
main
(
epsilon
)
{
Code-Block
}
newline
Code-Block
\n
newline
\n
epsilon
Statement
Code-Block
Var-dec
;
var
Var-dec'
in
Var-dec''
=
Expression
load-call
load
Fn-call'
(
Fn-Param
)
Expression
epsilon
"input.file"
epsilon
newline
Code-Block
\n
epsilon
Statement
Code-Block
print-call
;
print
Fn-call'
(
Fn-Param
)
Expression
epsilon
fibo
ID-Exp
Fn-call'
epsilon
(
Fn-Param
)
Expression
epsilon
in
ID-Exp
Array
epsilon
[
Expression
]
epsilon
Number
epsilon
0
newline
epsilon
\n
newline
\n
epsilon
newline
Main
\n
newline
\n
epsilon
Fn-def
epsilon
function
fibo
(
Fn-Param
)
{
Code-Block
}
Expression
epsilon
n
epsilon
newline
Code-Block
\n
epsilon
Statement
Code-Block
If
if
(
Expression
)
{
Code-Block
}
If'
n
ID-Exp
Num-Exp
Bool
==
Expression
Number
epsilon
0
newline
Code-Block
\n
epsilon
Statement
Code-Block
Return
;
return
Expression
Number
epsilon
0
newline
epsilon
\n
epsilon
newline
else
epsilon
\n
epsilon
Statement
Code-Block
If
if
(
Expression
)
{
Code-Block
}
If'
n
ID-Exp
Num-Exp
Bool
==
Expression
Number
epsilon
1
newline
Code-Block
\n
epsilon
Statement
Code-Block
Return
;
return
Expression
Number
epsilon
1
newline
epsilon
\n
epsilon
newline
else
Else
\n
epsilon
{
Code-Block
}
newline
Code-Block
\n
epsilon
Statement
Code-Block
Return
;
return
Expression
fibo
ID-Exp
Fn-call'
Num-Exp
(
Fn-Param
)
Expression
epsilon
n
ID-Exp
Num-Exp
Math-Exp'
-
Math-Exp
Term
epsilon
Factor
epsilon
Number
2
Math-Exp'
+
Math-Exp
Term
epsilon
Factor
epsilon
fibo
ID-Exp
Fn-call'
epsilon
(
Fn-Param
)
Expression
epsilon
n
ID-Exp
Num-Exp
Math-Exp'
-
Math-Exp
Term
epsilon
Factor
epsilon
Number
1
newline
epsilon
\n
epsilon
newline
epsilon
\n
epsilon
